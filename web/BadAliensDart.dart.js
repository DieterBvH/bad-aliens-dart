// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ListIterator = {"":"Object;i,list",
 get$hasNext: function() {
  return $.lt(this.i, this.list.length);
},
 next$0: function() {
  var value, t1;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  value = this.list[this.i];
  t1 = this.i;
  if (typeof t1 !== 'number')
    return this.next$0$bailout0(1, t1, value);
  this.i = t1 + 1;
  return value;
},
 next$0$bailout0: function(state0, t1, value) {
  this.i = $.add(t1, 1);
  return value;
}
};

$$.Closure = {"":"Object;",
 toString$0: function() {
  return "Closure";
}
};

$$.Dynamic_ = {"":"Object;"
};

$$.Creates = {"":"Object;types"
};

$$.Returns = {"":"Object;types"
};

$$.JSName = {"":"Object;name"
};

$$.Null = {"":"Object;"
};

$$.MetaInfo = {"":"Object;_tag?,_tags,_set?"
};

$$.JSSyntaxRegExp = {"":"Object;_lib0_pattern,_multiLine,_ignoreCase",
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 get$pattern: function() {
  return this._lib0_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$RegExp: true
};

$$.bool = {"":"Object;",
 is$bool: true
};

$$._DateImpl = {"":"Object;millisecondsSinceEpoch?,isUtc",
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Date))
    return false;
  return $.eq(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$lt$1: function(other) {
  return $.lt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$le$1: function(other) {
  return $.le(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$gt$1: function(other) {
  return $.gt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$ge$1: function(other) {
  return $.ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 get$hashCode: function() {
  return this.millisecondsSinceEpoch;
},
 toString$0: function() {
  var t1, t2, t3, y, m, d, h, min, sec, ms;
  t1 = new $._DateImpl_toString_fourDigits();
  t2 = new $._DateImpl_toString_threeDigits();
  t3 = new $._DateImpl_toString_twoDigits();
  y = t1.call$1(this.get$year());
  m = t3.call$1(this.get$month());
  d = t3.call$1(this.get$day());
  h = t3.call$1(this.get$hour());
  min = t3.call$1(this.get$minute());
  sec = t3.call$1(this.get$second());
  ms = t2.call$1(this.get$millisecond());
  if (this.isUtc === true)
    return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
  else
    return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
},
 add$1: function(duration) {
  var ms, t2;
  ms = this.millisecondsSinceEpoch;
  if (typeof ms !== 'number')
    return this.add$1$bailout0(1, duration, ms);
  t2 = duration.get$inMilliseconds();
  if (typeof t2 !== 'number')
    return this.add$1$bailout0(2, ms, t2);
  return $.Date_Date$fromMillisecondsSinceEpoch(ms + t2, this.isUtc);
},
 add$1$bailout0: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      ms = env1;
      duration = env0;
      break;
    case 2:
      t2 = env1;
      ms = env0;
      break;
  }
  switch (state0) {
    case 0:
      ms = this.millisecondsSinceEpoch;
    case 1:
      state0 = 0;
      t2 = duration.get$inMilliseconds();
    case 2:
      var ms, duration, t2;
      state0 = 0;
      return $.Date_Date$fromMillisecondsSinceEpoch($.add(ms, t2), this.isUtc);
  }
},
 get$year: function() {
  return $.Primitives_getYear(this);
},
 get$month: function() {
  return $.Primitives_getMonth(this);
},
 get$day: function() {
  return $.Primitives_getDay(this);
},
 get$hour: function() {
  return $.Primitives_getHours(this);
},
 get$minute: function() {
  return $.Primitives_getMinutes(this);
},
 get$second: function() {
  return $.Primitives_getSeconds(this);
},
 get$millisecond: function() {
  return $.Primitives_getMilliseconds(this);
},
 _DateImpl$now$0: function() {
  $.Primitives_lazyAsJsDate(this);
},
 _DateImpl$fromMillisecondsSinceEpoch$2: function(millisecondsSinceEpoch, isUtc) {
  var t1 = this.millisecondsSinceEpoch;
  if ($.gtB($.getInterceptor$JSNumber(t1).abs$0(t1), 8640000000000000))
    throw $.$$throw($.ArgumentError$(t1));
  t1 = this.isUtc;
  if (t1 == null)
    throw $.$$throw($.ArgumentError$(t1));
},
 is$Date: true
};

$$.NullThrownError = {"":"Object;",
 toString$0: function() {
  return "Throw of null.";
}
};

$$.ArgumentError = {"":"Object;message",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return "Illegal argument(s): " + $.S(t1);
  return "Illegal argument(s)";
}
};

$$.RangeError = {"":"ArgumentError;message",
 toString$0: function() {
  return "RangeError: " + $.S(this.message);
}
};

$$.NoSuchMethodError = {"":"Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
 toString$0: function() {
  var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_1 = $.StringBuffer_StringBuffer("");
  t1.i_2 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_2, t2.length); t1.i_2 = $.add(t1.i_2, 1)) {
    if ($.gtB(t1.i_2, 0)) {
      t3 = t1.sb_1;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor$JSArray(t3);
    t5 = t1.i_2;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t2.length)
      throw $.ioore(t5);
    t4.add$1(t3, $.Error_safeToString(t2[t5]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.getInterceptor$JSArray(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  t3 = t1.sb_1;
  actualParameters = $.getInterceptor(t3).toString$0(t3);
  t1.sb_1 = $.StringBuffer_StringBuffer("");
  for (i = 0; i < t2.length; ++i) {
    if (i > 0) {
      t3 = t1.sb_1;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor$JSArray(t3);
    if (i >= t2.length)
      throw $.ioore(i);
    t4.add$1(t3, t2[i]);
  }
  t1 = t1.sb_1;
  formalParameters = $.getInterceptor(t1).toString$0(t1);
  t1 = this._memberName;
  return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_1 = $.StringBuffer_StringBuffer("");
      t1.i_2 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_2, $.getInterceptor$JSStringJSArray(t2).get$length(t2)); t1.i_2 = $.add(t1.i_2, 1)) {
          if ($.gtB(t1.i_2, 0)) {
            t3 = t1.sb_1;
            $.getInterceptor$JSArray(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_1;
          $.getInterceptor$JSArray(t3).add$1(t3, $.Error_safeToString($.index(t2, t1.i_2)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.getInterceptor$JSArray(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, t3, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_1) + "]";
      else {
        t3 = t1.sb_1;
        actualParameters = $.getInterceptor(t3).toString$0(t3);
        t1.sb_1 = $.StringBuffer_StringBuffer("");
        for (i = 0; $.ltB(i, $.getInterceptor$JSStringJSArray(t2).get$length(t2)); ++i) {
          if (i > 0) {
            t3 = t1.sb_1;
            $.getInterceptor$JSArray(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_1;
          $.getInterceptor$JSArray(t3).add$1(t3, $.index(t2, i));
        }
        t1 = t1.sb_1;
        formalParameters = $.getInterceptor(t1).toString$0(t1);
        t1 = this._memberName;
        return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
      }
  }
}
};

$$.UnsupportedError = {"":"Object;message?",
 toString$0: function() {
  return "Unsupported operation: " + $.S(this.get$message());
}
};

$$.UnimplementedError = {"":"Object;message?",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
}
};

$$.StateError = {"":"Object;message",
 toString$0: function() {
  return "Bad state: " + this.message;
}
};

$$.StackOverflowError = {"":"Object;",
 toString$0: function() {
  return "Stack Overflow";
}
};

$$._ExceptionImplementation = {"":"Object;message",
 toString$0: function() {
  var t1 = this.message;
  if (t1 == null)
    return "Exception";
  return "Exception: " + $.S(t1);
}
};

$$.IllegalJSRegExpException = {"":"Object;_pattern,_errmsg",
 toString$0: function() {
  return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
}
};

$$.RuntimeError = {"":"Object;message",
 toString$0: function() {
  return "RuntimeError: " + this.message;
}
};

$$._HashMapImpl = {"":"Object;_keys,_values,_loadLimit,_numberOfEntries,_numberOfDeleted",
 _probeForAdding$1: function(key) {
  var t1, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  hash = (t1 & this._keys.length - 1) >>> 0;
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC4)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    if (hash !== (hash | 0))
      return this._probeForAdding$1$bailout(2, key, insertionIndex, hash, numberOfProbes0);
  }
},
 _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env1;
      key = env0;
      break;
    case 2:
      numberOfProbes0 = env3;
      hash = env2;
      insertionIndex = env1;
      key = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (key == null)
        throw $.$$throw($.ArgumentError$(null));
      t1 = $.getInterceptor(key).get$hashCode(key);
    case 1:
      state0 = 0;
      hash = $.and(t1, this._keys.length - 1);
      numberOfProbes = 1;
      insertionIndex = -1;
    case 2:
      var t1, key, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
              t1 = this._keys;
              if (hash !== (hash | 0))
                throw $.iae(hash);
              if (hash < 0 || hash >= t1.length)
                throw $.ioore(hash);
              existingKey = t1[hash];
              if (existingKey == null) {
                if (insertionIndex < 0)
                  return hash;
                return insertionIndex;
              } else if ($.eqB(existingKey, key))
                return hash;
              else if (insertionIndex < 0 && existingKey === $.CTC4)
                insertionIndex = hash;
              numberOfProbes0 = numberOfProbes + 1;
              hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
            case 2:
              state0 = 0;
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  hash = $.and($.getInterceptor(key).get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, t1, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, capacity, numberOfFreeOrDeleted, t1;
  newNumberOfEntries = $.add(this._numberOfEntries, 1);
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  capacity = this._keys.length;
  if (typeof newNumberOfEntries !== 'number')
    throw $.iae(newNumberOfEntries);
  numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity, oldKeys, oldValues, i, key, value, newIndex, t1;
  capacity = this._keys.length;
  this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
  oldKeys = this._keys;
  oldValues = this._values;
  this._keys = $.List_List(newCapacity);
  this._values = $.List_List(newCapacity);
  for (i = 0; i < capacity; ++i) {
    if (i >= oldKeys.length)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CTC4)
      continue;
    if (i >= oldValues.length)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    t1 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t1.length)
      throw $.ioore(newIndex);
    t1[newIndex] = key;
    t1 = this._values;
    if (newIndex >= t1.length)
      throw $.ioore(newIndex);
    t1[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  var t1, length$, t2, t3, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = t1.length;
  for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 operator$indexSet$2: function(key, value) {
  var index, t1;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CTC4)
    this._numberOfEntries = $.add(this._numberOfEntries, 1);
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index, t1;
  index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 get$isEmpty: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$, i, t1, key;
  length$ = this._keys.length;
  for (i = 0; i < length$; ++i) {
    t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    key = t1[i];
    if (!(key == null) && !(key === $.CTC4)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  this._keys = $.List_List(8);
  this._values = $.List_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"":"Object;"
};

$$._KeyValuePair = {"":"Object;key?,value="
};

$$._LinkedHashMapImpl = {"":"Object;_list,_map",
 operator$indexSet$2: function(key, value) {
  if (this._map.containsKey$1(key) === true)
    $.index(this._map, key).get$element().set$value(value);
  else {
    this._list.addLast$1($._KeyValuePair$(key, value));
    $.indexSet(this._map, key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.index(this._map, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 forEach$1: function(f) {
  this._list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  var t1 = this._map;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 clear$0: function() {
  var t1 = this._map;
  $.getInterceptor$JSArray(t1).clear$0(t1);
  this._list.clear$0();
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  this._map = $.HashMap_HashMap();
  this._list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.Object = {"":";",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$.DoubleLinkedQueueEntry = {"":"Object;_previous=,_next=,_element?",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"":"DoubleLinkedQueueEntry;_previous,_next,_element",
 remove$0: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"":"Object;_sentinel",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length_anon(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
  }
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"":"Object;_sentinel,_currentEntry",
 get$hasNext: function() {
  var t1, t2;
  t1 = this._currentEntry.get$_next();
  t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$._StringBufferImpl = {"":"Object;_buffer,_lib_length",
 get$length: function() {
  return this._lib_length;
},
 get$isEmpty: function() {
  return $.eq(this._lib_length, 0);
},
 add$1: function(obj) {
  var str, t1, t3;
  str = $.getInterceptor(obj).toString$0(obj);
  if (str == null || $.getInterceptor$JSStringJSArray(str).get$isEmpty(str) === true)
    return this;
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, str);
  t1 = this._lib_length;
  if (typeof t1 !== 'number')
    return this.add$1$bailout(1, str, t1);
  t3 = $.getInterceptor$JSStringJSArray(str).get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t3, t1);
  this._lib_length = t1 + t3;
  return this;
},
 add$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      str = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      str = $.getInterceptor(obj).toString$0(obj);
      if (str == null || $.getInterceptor$JSStringJSArray(str).get$isEmpty(str) === true)
        return this;
      t1 = this._buffer;
      $.getInterceptor$JSArray(t1).add$1(t1, str);
      t1 = this._lib_length;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(str).get$length(str);
    case 2:
      var str, t1, t3;
      state0 = 0;
      this._lib_length = $.add(t1, t3);
      return this;
  }
},
 clear$0: function() {
  this._buffer = $.List_List(null);
  this._lib_length = 0;
  return this;
},
 toString$0: function() {
  var t1, result;
  t1 = this._buffer;
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
    return "";
  t1 = this._buffer;
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1))
    return $.index(this._buffer, 0);
  result = $.stringJoinUnchecked($.Strings__toJsStringArray(this._buffer), "");
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).clear$0(t1);
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ObjectInterceptor = {"":"Object;",
 get$length: function(receiver) { return receiver.get$length(); },
 add$1: function(receiver, a0) { return receiver.add$1(a0); },
 charCodeAt$1: function(receiver, a0) { return receiver.charCodeAt$1(a0); },
 iterator$0: function(receiver) { return receiver.iterator$0(); },
 substring$1: function(receiver, a0) { return receiver.substring$1(a0); },
 replaceAll$2: function(receiver, a0, a1) { return receiver.replaceAll$2(a0, a1); },
 floor$0: function(receiver) { return receiver.floor$0(); },
 set$length: function(receiver) { return receiver.set$length(); },
 removeRange$2: function(receiver, a0, a1) { return receiver.removeRange$2(a0, a1); },
 get$isNaN: function(receiver) { return receiver.get$isNaN(); },
 toString$0: function(receiver) { return receiver.toString$0(); },
 forEach$1: function(receiver, a0) { return receiver.forEach$1(a0); },
 get$isEmpty: function(receiver) { return receiver.get$isEmpty(); },
 get$hashCode: function(receiver) { return receiver.get$hashCode(); },
 truncate$0: function(receiver) { return receiver.truncate$0(); },
 addLast$1: function(receiver, a0) { return receiver.addLast$1(a0); },
 clear$0: function(receiver) { return receiver.clear$0(); },
 endsWith$1: function(receiver, a0) { return receiver.endsWith$1(a0); },
 removeLast$0: function(receiver) { return receiver.removeLast$0(); },
 get$isNegative: function(receiver) { return receiver.get$isNegative(); },
 abs$0: function(receiver) { return receiver.abs$0(); },
 ceil$0: function(receiver) { return receiver.ceil$0(); }
};

$$.JSFunction = {"":"Object;",
 toString$0: function(receiver) {
  return "Closure";
}
};

$$.JSBool = {"":"Object;",
 toString$0: function(receiver) {
  return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver ? 519018 : 218159;
},
 is$bool: true
};

$$.JSNull = {"":"Object;",
 toString$0: function(receiver) {
  return "null";
},
 get$hashCode: function(receiver) {
  return 0;
}
};

$$.JSArray = {"":"Object;",
 add$1: function(receiver, value) {
  $.checkGrowable(receiver, "add");
  receiver.push(value);
},
 removeLast$0: function(receiver) {
  $.checkGrowable(receiver, "removeLast");
  if (receiver.length === 0)
    throw $.$$throw($.RangeError$value(-1));
  return receiver.pop();
},
 addLast$1: function(receiver, value) {
  $.checkGrowable(receiver, "addLast");
  receiver.push(value);
},
 clear$0: function(receiver) {
  this.set$length(receiver, 0);
},
 forEach$1: function(receiver, f) {
  return $.Collections_forEach(receiver, f);
},
 removeRange$2: function(receiver, start, length$) {
  var receiverLength, t1, t2;
  $.checkGrowable(receiver, "removeRange");
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.RangeError$value(t1));
  t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.CTC1.set$length(receiver, t2);
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return $.Collections_collectionToString(receiver);
},
 iterator$0: function(receiver) {
  return $.ListIterator$(receiver);
},
 get$hashCode: function(receiver) {
  return $.Primitives_objectHashCode(receiver);
},
 get$length: function(receiver) {
  return receiver.length;
},
 set$length: function(receiver, newLength) {
  if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
    throw $.$$throw($.ArgumentError$(newLength));
  if (newLength < 0)
    throw $.$$throw($.RangeError$value(newLength));
  $.checkGrowable(receiver, "set length");
  receiver.length = newLength;
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.JSNumber = {"":"Object;",
 get$isNegative: function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
},
 get$isNaN: function(receiver) {
  return isNaN(receiver);
},
 abs$0: function(receiver) {
  return Math.abs(receiver);
},
 ceil$0: function(receiver) {
  return Math.ceil(receiver);
},
 floor$0: function(receiver) {
  return Math.floor(receiver);
},
 truncate$0: function(receiver) {
  return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
},
 toString$0: function(receiver) {
  if (receiver === 0 && (1 / receiver) < 0)
    return "-0.0";
  else
    return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver & 536870911;
}
};

$$.JSInt = {"":"JSNumber;"
};

$$.JSDouble = {"":"JSNumber;"
};

$$.JSString = {"":"Object;",
 charCodeAt$1: function(receiver, index) {
  if (index < 0)
    throw $.$$throw($.RangeError$value(index));
  if (index >= receiver.length)
    throw $.$$throw($.RangeError$value(index));
  return receiver.charCodeAt(index);
},
 endsWith$1: function(receiver, other) {
  var otherLength, t1;
  $.checkString(other);
  otherLength = other.length;
  t1 = receiver.length;
  if (otherLength > t1)
    return false;
  return other === this.substring$1(receiver, t1 - otherLength);
},
 replaceAll$2: function(receiver, from, to) {
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
},
 substring$2: function(receiver, startIndex, endIndex) {
  $.checkNum(startIndex);
  if (endIndex == null)
    endIndex = receiver.length;
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, receiver.length))
    throw $.$$throw($.RangeError$value(endIndex));
  return receiver.substring(startIndex, endIndex);
},
 substring$1: function($receiver, startIndex) {
  return this.substring$2($receiver, startIndex, null);
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return receiver;
},
 get$hashCode: function(receiver) {
  var i, hash, hash0, hash1;
  for (i = 0, hash = 0; i < receiver.length; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
},
 get$length: function(receiver) {
  return receiver.length;
},
 is$String: true
};

$$.AssetManager = {"":"Object;successCount=,errorCount=,cache,downloadQueue?",
 queueDownload$1: function(path) {
  this.downloadQueue.push(path);
},
 downloadAll$1: function(downloadCallback) {
  var t1, t2, t3, img, t4;
  t1 = this.downloadQueue;
  if (t1.length === 0)
    downloadCallback.call$0();
  t1 = $.CTC1.iterator$0(t1);
  t2 = this.cache;
  if (typeof t2 !== 'object' || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !t2.is$JavaScriptIndexingBehavior())
    return this.downloadAll$1$bailout(1, downloadCallback, t1, t2);
  for (; t1.get$hasNext() === true;) {
    t3 = t1.next$0();
    img = $.ImageElement_ImageElement(null, null, null);
    t4 = img.get$on().get$load();
    $.getInterceptor$JSArray(t4).add$1(t4, new $.AssetManager_downloadAll_anon(img, downloadCallback, this));
    t4 = img.get$on().get$error();
    $.getInterceptor$JSArray(t4).add$1(t4, new $.AssetManager_downloadAll_anon0(downloadCallback, this));
    img.set$src(t3);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = img;
  }
},
 downloadAll$1$bailout: function(state0, downloadCallback, t1, t2) {
  var t3, img, t4;
  for (; t1.get$hasNext() === true;) {
    t3 = t1.next$0();
    img = $.ImageElement_ImageElement(null, null, null);
    t4 = img.get$on().get$load();
    $.getInterceptor$JSArray(t4).add$1(t4, new $.AssetManager_downloadAll_anon(img, downloadCallback, this));
    t4 = img.get$on().get$error();
    $.getInterceptor$JSArray(t4).add$1(t4, new $.AssetManager_downloadAll_anon0(downloadCallback, this));
    img.set$src(t3);
    $.indexSet(t2, t3, img);
  }
},
 getAsset$1: function(path) {
  return $.index(this.cache, path);
},
 isDone$0: function() {
  return this.downloadQueue.length === $.add(this.successCount, this.errorCount);
}
};

$$.Animation = {"":"Object;spriteSheet,frameWidth?,frameHeight,frameDuration,totalTime,loop,elapsedTime",
 drawFrame$5: function(tick, ctx, x, y, scaleBy) {
  var t1, t2, index, t3, locX, locY;
  t1 = this.elapsedTime;
  if (typeof tick !== 'number')
    throw $.iae(tick);
  this.elapsedTime = t1 + tick;
  if (this.loop === true) {
    if ($.geB(this.elapsedTime, this.totalTime))
      this.elapsedTime = 0;
  } else if ($.geB(this.elapsedTime, this.totalTime))
    return;
  t1 = this.elapsedTime;
  t2 = this.frameDuration;
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  index = $.CTC6.floor$0(t1 / t2);
  t3 = this.frameWidth;
  locX = $.sub(x, $.mul($.div(t3, 2), scaleBy));
  locY = $.sub(y, $.mul($.div(this.frameHeight, 2), scaleBy));
  ctx.drawImage$9(this.spriteSheet, $.mul(index, t3), 0, t3, this.frameHeight, locX, locY, $.mul(t3, scaleBy), $.mul(this.frameHeight, scaleBy));
},
 drawFrame$4: function(tick, ctx, x, y) {
  return this.drawFrame$5(tick, ctx, x, y, 1);
},
 isDone$0: function() {
  return $.ge(this.elapsedTime, this.totalTime);
},
 currentFrame$0: function() {
  var t1, t2;
  t1 = this.elapsedTime;
  t2 = this.frameDuration;
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  return $.CTC6.floor$0(t1 / t2);
},
 Animation$4$loop: function(spriteSheet, frameWidth, frameDuration, loop) {
  var t1 = this.spriteSheet;
  this.frameHeight = t1.get$height();
  this.totalTime = $.mul($.div(t1.get$width(), this.frameWidth), this.frameDuration);
}
};

$$.Timer = {"":"Object;gameTime,wallLastTimestamp",
 tick$0: function() {
  var wallCurrent, wallDelta, gameDelta;
  wallCurrent = $.Date_Date$now().get$millisecondsSinceEpoch();
  wallDelta = $.div($.sub(wallCurrent, this.wallLastTimestamp), 1000);
  this.wallLastTimestamp = wallCurrent;
  gameDelta = $.min(wallDelta, 0.05);
  this.gameTime = this.gameTime + gameDelta;
  return gameDelta;
}
};

$$.GameEntity = {"":"Object;x?,y?,removeFromWorld?",
 update$0: function() {
},
 draw$1: function(ctx) {
  if (this.game.get$showOutlines() === true) {
    ctx.beginPath$0();
    ctx.set$strokeStyle("green");
    ctx.arc$6(this.x, this.y, this.radius, 0, 6.283185307179586, false);
    ctx.stroke$0();
    ctx.closePath$0();
  }
},
 drawSpriteCentered$1: function(ctx) {
  var _x, _y;
  _x = $.sub(this.x, $.div(this.sprite.get$width(), 2));
  _y = $.sub(this.y, $.div(this.sprite.get$height(), 2));
  ctx.drawImage$3(this.sprite, _x, _y);
},
 outsideScreen$0: function() {
  var t1, t2;
  t1 = this.x;
  t2 = this.game;
  return $.gtB(t1, t2.get$halfSurfaceWidth()) || $.ltB(this.x, $.neg(t2.get$halfSurfaceWidth())) || $.gtB(this.y, t2.get$halfSurfaceHeight()) || $.ltB(this.y, $.neg(t2.get$halfSurfaceHeight()));
},
 rotateAndCache$2: function(image, angle) {
  var offscreenCanvas, size, offscreenCtx, t1;
  offscreenCanvas = $.CanvasElement_CanvasElement(null, null);
  size = $.max(image.get$width(), image.get$height());
  offscreenCanvas.set$width(size);
  offscreenCanvas.set$height(size);
  offscreenCtx = offscreenCanvas.getContext$1("2d");
  offscreenCtx.save$0();
  t1 = size / 2;
  offscreenCtx.translate$2(t1, t1);
  offscreenCtx.rotate$1($.add(angle, 1.5707963267948966));
  offscreenCtx.translate$2(0, 0);
  offscreenCtx.drawImage$3(image, $.neg($.div(image.get$width(), 2)), $.neg($.div(image.get$height(), 2)));
  offscreenCtx.restore$0();
  return offscreenCanvas;
}
};

$$.Game = {"":"Object;entities?,ctx?,click=,mouse=,clockTick?,halfSurfaceWidth?,halfSurfaceHeight?,clientBoundingRect?,assetManager?,showOutlines?",
 init$1: function(_ctx) {
  var rect;
  this.ctx = _ctx;
  this.surfaceWidth = this.ctx.get$canvas().get$width();
  this.surfaceHeight = this.ctx.get$canvas().get$height();
  this.halfSurfaceWidth = $.div(this.surfaceWidth, 2);
  this.halfSurfaceHeight = $.div(this.surfaceHeight, 2);
  rect = this.ctx.get$canvas().getBoundingClientRect$0();
  this.clientBoundingRect = $.GamePoint$(rect.get$left(), rect.get$top());
  this.startInput$0();
  $.print("game initialized");
},
 start$0: function() {
  $.print("starting game");
  $.window().requestAnimationFrame$1(this.get$loop());
},
 loop$1: function(time) {
  this.clockTick = this.timer.tick$0();
  this.update$0();
  this.draw$0();
  this.click = null;
  $.window().requestAnimationFrame$1(this.get$loop());
},
 get$loop: function() { return new $.BoundClosure(this, 'loop$1'); },
 startInput$0: function() {
  var t1, t2;
  $.print("Starting input");
  t1 = new $.Game_startInput_getXandY(this);
  t2 = this.ctx.get$canvas().get$on().get$click();
  $.getInterceptor$JSArray(t2).add$1(t2, new $.Game_startInput_anon(t1, this));
  t2 = this.ctx.get$canvas().get$on().get$mouseMove();
  $.getInterceptor$JSArray(t2).add$1(t2, new $.Game_startInput_anon0(t1, this));
  $.print("Input started");
},
 addEntity$1: function(entity) {
  this.entities.push(entity);
},
 draw$0: function() {
  var t1 = this.ctx;
  t1.clearRect$4(0, 0, t1.get$canvas().get$width(), this.ctx.get$canvas().get$height());
  this.ctx.save$0();
  t1 = this.ctx;
  t1.translate$2($.div(t1.get$canvas().get$width(), 2), $.div(this.ctx.get$canvas().get$height(), 2));
  for (t1 = $.CTC1.iterator$0(this.entities); t1.get$hasNext() === true;)
    t1.next$0().draw$1(this.ctx);
  this.drawBeforeCtxRestore$0();
  this.ctx.restore$0();
},
 drawBeforeCtxRestore$0: function() {
},
 update$0: function() {
  var t1, entitiesCount, i, entity;
  t1 = this.entities;
  entitiesCount = t1.length;
  for (i = 0; i < entitiesCount; ++i) {
    if (i >= t1.length)
      throw $.ioore(i);
    entity = t1[i];
    if (entity.get$removeFromWorld() !== true)
      entity.update$0();
  }
  for (i = t1.length - 1; i >= 0; --i) {
    if (i >= t1.length)
      throw $.ioore(i);
    if (t1[i].get$removeFromWorld() === true)
      $.CTC1.removeRange$2(t1, i, 1);
  }
}
};

$$.GamePoint = {"":"Object;x?,y?"
};

$$.Alien = {"":"GameEntity;radialDistance,angle,speed,game,x,y,removeFromWorld,sprite,radius",
 setCoords$0: function() {
  this.x = $.mul(this.radialDistance, $.cos(this.angle));
  this.y = $.mul(this.radialDistance, $.sin(this.angle));
},
 update$0: function() {
  var t1, t3, t5, t7, t8, t9;
  t1 = this.radialDistance;
  if (typeof t1 !== 'number')
    return this.update$0$bailout3(1, t1);
  this.x = t1 * $.cos(this.angle);
  t3 = this.radialDistance;
  if (typeof t3 !== 'number')
    return this.update$0$bailout3(2, t3);
  this.y = t3 * $.sin(this.angle);
  t5 = this.radialDistance;
  if (typeof t5 !== 'number')
    return this.update$0$bailout3(3, t5);
  t7 = this.speed;
  t8 = this.game;
  t9 = t8.get$clockTick();
  if (typeof t9 !== 'number')
    throw $.iae(t9);
  this.radialDistance = t5 - t7 * t9;
  if (this.hitPlanet$0() === true) {
    this.removeFromWorld = true;
    t1 = t8.get$lives();
    if (typeof t1 !== 'number')
      return this.update$0$bailout3(4, t1, t8);
    t8.set$lives(t1 - 1);
  }
},
 update$0$bailout3: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t3 = env0;
      break;
    case 3:
      t5 = env0;
      break;
    case 4:
      t8 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.radialDistance;
    case 1:
      state0 = 0;
      this.x = $.mul(t1, $.cos(this.angle));
      t3 = this.radialDistance;
    case 2:
      state0 = 0;
      this.y = $.mul(t3, $.sin(this.angle));
      t5 = this.radialDistance;
    case 3:
      state0 = 0;
      t7 = this.speed;
      t8 = this.game;
      t9 = t8.get$clockTick();
      if (typeof t9 !== 'number')
        throw $.iae(t9);
      this.radialDistance = $.sub(t5, t7 * t9);
    case 4:
      var t1, t3, t5, t7, t8, t9;
      if (state0 === 4 || state0 === 0 && this.hitPlanet$0() === true)
        switch (state0) {
          case 0:
            this.removeFromWorld = true;
            t1 = t8.get$lives();
          case 4:
            state0 = 0;
            t8.set$lives($.sub(t1, 1));
        }
  }
},
 draw$1: function(ctx) {
  this.drawSpriteCentered$1(ctx);
  $.GameEntity.prototype.draw$1.call(this, ctx);
},
 hitPlanet$0: function() {
  var t1, t2;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  t2 = this.y;
  return $.lt($.add(t1, $.mul(t2, t2)), $.mul($.add(this.radius, 67), $.add(this.radius, 67)));
},
 explode$0: function() {
  this.removeFromWorld = true;
  var t1 = this.game;
  t1.addEntity$1($.AlienExplosion$(t1, this.x, this.y));
},
 Alien$3: function(game, radialDistance, angle) {
  this.sprite = this.rotateAndCache$2(game.get$assetManager().getAsset$1("img/alien.png"), this.angle);
  this.radius = $.div(this.sprite.get$height(), 2);
  this.setCoords$0();
},
 is$Alien: true
};

$$.AlienExplosion = {"":"GameEntity;animation,game,x,y,removeFromWorld,sprite,radius",
 update$0: function() {
  if (this.animation.isDone$0() === true)
    this.removeFromWorld = true;
},
 draw$1: function(ctx) {
  $.GameEntity.prototype.draw$1.call(this, ctx);
  this.animation.drawFrame$4(this.game.get$clockTick(), ctx, this.x, this.y);
},
 AlienExplosion$3: function(game, x, y) {
  this.animation = $.Animation$(game.get$assetManager().getAsset$1("img/alien-explosion.png"), 69, 0.05, false);
  this.radius = $.div(this.animation.frameWidth, 2);
}
};

$$.Sentry = {"":"GameEntity;angle,game,x,y,removeFromWorld,sprite,radius",
 update$0: function() {
  var t1, t2;
  t1 = this.game;
  t2 = t1.get$mouse();
  if (!(t2 == null)) {
    this.angle = $.atan2(t2.get$y(), t2.get$x());
    t2 = this.angle;
    if (typeof t2 !== 'number')
      return this.update$0$bailout(1, t2, t1);
    if (t2 < 0)
      this.angle = t2 + 6.283185307179586;
    this.x = $.cos(this.angle) * 85;
    this.y = $.sin(this.angle) * 85;
  }
  if (!(t1.get$click() == null))
    t1.addEntity$1($.Bullet$(t1, this.x, this.y, this.angle, t1.get$click()));
},
 update$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      t2 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.game;
      t2 = t1.get$mouse();
    default:
      var t1, t2;
      if (state0 === 2 || state0 === 1 || state0 === 0 && !(t2 == null))
        switch (state0) {
          case 0:
            this.angle = $.atan2(t2.get$y(), t2.get$x());
            t2 = this.angle;
          case 1:
            state0 = 0;
          case 2:
            if (state0 === 2 || state0 === 0 && $.ltB(t2, 0))
              switch (state0) {
                case 0:
                  t2 = this.angle;
                case 2:
                  state0 = 0;
                  this.angle = $.add(t2, 6.283185307179586);
              }
            this.x = $.cos(this.angle) * 85;
            this.y = $.sin(this.angle) * 85;
        }
      if (!(t1.get$click() == null))
        t1.addEntity$1($.Bullet$(t1, this.x, this.y, this.angle, t1.get$click()));
  }
},
 draw$1: function(ctx) {
  var t1, t3, t4, t6, t7;
  ctx.save$0();
  ctx.translate$2(this.x, this.y);
  t1 = this.angle;
  if (typeof t1 !== 'number')
    return this.draw$1$bailout(1, ctx, t1);
  ctx.rotate$1(t1 + 1.5707963267948966);
  t3 = this.sprite;
  t4 = t3.get$width();
  if (typeof t4 !== 'number')
    return this.draw$1$bailout(2, ctx, t4, t3);
  t6 = -t4 / 2;
  t7 = this.sprite.get$height();
  if (typeof t7 !== 'number')
    return this.draw$1$bailout(3, ctx, t6, t3, t7);
  ctx.drawImage$3(t3, t6, -t7 / 2);
  ctx.restore$0();
  $.GameEntity.prototype.draw$1.call(this, ctx);
},
 draw$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env1;
      ctx = env0;
      break;
    case 2:
      t3 = env2;
      t4 = env1;
      ctx = env0;
      break;
    case 3:
      t7 = env3;
      t3 = env2;
      t6 = env1;
      ctx = env0;
      break;
  }
  switch (state0) {
    case 0:
      ctx.save$0();
      ctx.translate$2(this.x, this.y);
      t1 = this.angle;
    case 1:
      state0 = 0;
      ctx.rotate$1($.add(t1, 1.5707963267948966));
      t3 = this.sprite;
      t4 = t3.get$width();
    case 2:
      state0 = 0;
      t6 = $.div($.neg(t4), 2);
      t7 = this.sprite.get$height();
    case 3:
      var t1, ctx, t3, t4, t6, t7;
      state0 = 0;
      ctx.drawImage$3(t3, t6, $.div($.neg(t7), 2));
      ctx.restore$0();
      $.GameEntity.prototype.draw$1.call(this, ctx);
  }
},
 Sentry$1: function(game) {
  this.sprite = game.get$assetManager().getAsset$1("img/sentry.png");
  this.radius = $.div(this.sprite.get$width(), 2);
}
};

$$.Bullet = {"":"GameEntity;angle,explodesAt,radialDistance,animation,game,x,y,removeFromWorld,sprite,radius",
 update$0: function() {
  var t1, t3, t4, t2;
  if (this.outsideScreen$0() === true)
    this.removeFromWorld = true;
  else {
    t1 = this.x;
    t1 = $.getInterceptor$JSNumber(t1).abs$0(t1);
    if (typeof t1 !== 'number')
      return this.update$0$bailout0(1, t1);
    t3 = this.explodesAt;
    t4 = t3.get$x();
    t4 = $.getInterceptor$JSNumber(t4).abs$0(t4);
    if (typeof t4 !== 'number')
      return this.update$0$bailout0(2, t4, t1, t3);
    if (!(t1 >= t4)) {
      t1 = this.y;
      t1 = $.getInterceptor$JSNumber(t1).abs$0(t1);
      if (typeof t1 !== 'number')
        return this.update$0$bailout0(3, t1, t3);
      t4 = t3.get$y();
      t4 = $.getInterceptor$JSNumber(t4).abs$0(t4);
      if (typeof t4 !== 'number')
        return this.update$0$bailout0(4, t1, t4, t3);
      t4 = t1 >= t4;
      t1 = t4;
    } else
      t1 = true;
    t2 = this.game;
    if (t1) {
      t2.addEntity$1($.BulletExplosion$(t2, t3.get$x(), t3.get$y()));
      this.removeFromWorld = true;
    } else {
      this.x = this.radialDistance * $.cos(this.angle);
      this.y = this.radialDistance * $.sin(this.angle);
      t1 = this.radialDistance;
      t2 = t2.get$clockTick();
      if (typeof t2 !== 'number')
        throw $.iae(t2);
      this.radialDistance = t1 + 250 * t2;
    }
  }
},
 update$0$bailout0: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t3 = env2;
      t1 = env1;
      t4 = env0;
      break;
    case 3:
      t3 = env1;
      t1 = env0;
      break;
    case 4:
      t3 = env2;
      t4 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var t1, t3, t4, t2;
      if (state0 === 0 && this.outsideScreen$0() === true)
        this.removeFromWorld = true;
      else
        switch (state0) {
          case 0:
            t1 = this.x;
            t1 = $.getInterceptor$JSNumber(t1).abs$0(t1);
          case 1:
            state0 = 0;
            t3 = this.explodesAt;
            t4 = t3.get$x();
            t4 = $.getInterceptor$JSNumber(t4).abs$0(t4);
          case 2:
            state0 = 0;
          default:
            if (state0 === 4 || state0 === 3 || state0 === 0 && !$.geB(t1, t4))
              switch (state0) {
                case 0:
                  t1 = this.y;
                  t1 = $.getInterceptor$JSNumber(t1).abs$0(t1);
                case 3:
                  state0 = 0;
                  t4 = t3.get$y();
                  t4 = $.getInterceptor$JSNumber(t4).abs$0(t4);
                case 4:
                  state0 = 0;
                  t4 = $.geB(t1, t4);
                  t1 = t4;
              }
            else
              t1 = true;
            t2 = this.game;
            if (t1) {
              t2.addEntity$1($.BulletExplosion$(t2, t3.get$x(), t3.get$y()));
              this.removeFromWorld = true;
            } else {
              this.x = this.radialDistance * $.cos(this.angle);
              this.y = this.radialDistance * $.sin(this.angle);
              t1 = this.radialDistance;
              t2 = t2.get$clockTick();
              if (typeof t2 !== 'number')
                throw $.iae(t2);
              this.radialDistance = t1 + 250 * t2;
            }
        }
  }
},
 draw$1: function(ctx) {
  var t1, t3, t5;
  ctx.save$0();
  ctx.translate$2(this.x, this.y);
  t1 = this.angle;
  if (typeof t1 !== 'number')
    return this.draw$1$bailout1(1, ctx, t1);
  ctx.rotate$1(t1 + 1.5707963267948966);
  t3 = this.x;
  if (typeof t3 !== 'number')
    return this.draw$1$bailout1(2, ctx, t3);
  t3 = -t3;
  t5 = this.y;
  if (typeof t5 !== 'number')
    return this.draw$1$bailout1(3, ctx, t3, t5);
  ctx.translate$2(t3, -t5);
  this.animation.drawFrame$4(this.game.get$clockTick(), ctx, this.x, this.y);
  ctx.restore$0();
  $.GameEntity.prototype.draw$1.call(this, ctx);
},
 draw$1$bailout1: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      ctx = env0;
      break;
    case 2:
      t3 = env1;
      ctx = env0;
      break;
    case 3:
      t5 = env2;
      t3 = env1;
      ctx = env0;
      break;
  }
  switch (state0) {
    case 0:
      ctx.save$0();
      ctx.translate$2(this.x, this.y);
      t1 = this.angle;
    case 1:
      state0 = 0;
      ctx.rotate$1($.add(t1, 1.5707963267948966));
      t3 = this.x;
    case 2:
      state0 = 0;
      t3 = $.neg(t3);
      t5 = this.y;
    case 3:
      var t1, ctx, t3, t5;
      state0 = 0;
      ctx.translate$2(t3, $.neg(t5));
      this.animation.drawFrame$4(this.game.get$clockTick(), ctx, this.x, this.y);
      ctx.restore$0();
      $.GameEntity.prototype.draw$1.call(this, ctx);
  }
},
 Bullet$5: function(game, x, y, angle, explodesAt) {
  this.sprite = game.get$assetManager().getAsset$1("img/bullet.png");
  this.animation = $.Animation$(this.sprite, 7, 0.05, true);
}
};

$$.BulletExplosion = {"":"GameEntity;animation,game,x,y,removeFromWorld,sprite,radius",
 update$0: function() {
  var t1, t2, i, alien;
  if (this.animation.isDone$0() === true) {
    this.removeFromWorld = true;
    return;
  }
  t1 = this.animation;
  t2 = t1.frameWidth;
  if (typeof t2 !== 'number')
    return this.update$0$bailout1(1, t2);
  t2 /= 2;
  t1 = t1.currentFrame$0();
  if (typeof t1 !== 'number')
    return this.update$0$bailout1(2, t2, t1);
  this.radius = t2 * (1 + t1 / 3);
  t1 = this.game;
  i = 0;
  while (true) {
    t2 = t1.get$entities();
    t2 = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
    if (typeof t2 !== 'number')
      return this.update$0$bailout1(3, i, t1, t2);
    if (!(i < t2))
      break;
    t2 = t1.get$entities();
    if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.update$0$bailout1(4, i, t1, t2);
    if (i >= t2.length)
      throw $.ioore(i);
    alien = t2[i];
    if (typeof alien === 'object' && alien !== null && !!alien.is$Alien && this.isCaughtInExplosion$1(alien) === true) {
      t2 = t1.get$score();
      if (typeof t2 !== 'number')
        return this.update$0$bailout1(5, i, t1, alien, t2);
      t1.set$score(t2 + 10);
      alien.explode$0();
    }
    ++i;
  }
},
 update$0$bailout1: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t3 = env1;
      t1 = env0;
      break;
    case 3:
      t2 = env2;
      t1 = env1;
      i = env0;
      break;
    case 4:
      t2 = env2;
      t1 = env1;
      i = env0;
      break;
    case 5:
      t2 = env3;
      alien = env2;
      t1 = env1;
      i = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.animation.isDone$0() === true) {
        this.removeFromWorld = true;
        return;
      }
      t1 = this.animation.frameWidth;
    case 1:
      state0 = 0;
      t1 = $.div(t1, 2);
      t3 = this.animation.currentFrame$0();
    case 2:
      state0 = 0;
      t3 = $.div(t3, 3);
      if (typeof t3 !== 'number')
        throw $.iae(t3);
      this.radius = $.mul(t1, 1 + t3);
      t1 = this.game;
      i = 0;
    default:
      var t1, t3, i, t2, alien;
      L0:
        while (true)
          switch (state0) {
            case 0:
              t2 = t1.get$entities();
              t2 = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
            case 3:
              state0 = 0;
              if (!$.ltB(i, t2))
                break L0;
              t2 = t1.get$entities();
            case 4:
              state0 = 0;
              alien = $.index(t2, i);
            case 5:
              if (state0 === 5 || state0 === 0 && typeof alien === 'object' && alien !== null && !!alien.is$Alien && this.isCaughtInExplosion$1(alien) === true)
                switch (state0) {
                  case 0:
                    t2 = t1.get$score();
                  case 5:
                    state0 = 0;
                    t1.set$score($.add(t2, 10));
                    alien.explode$0();
                }
              ++i;
          }
  }
},
 isCaughtInExplosion$1: function(alien) {
  var t1, t3, t5, t6, t8, t10, distance_squared, t12, t14;
  t1 = this.x;
  if (typeof t1 !== 'number')
    return this.isCaughtInExplosion$1$bailout(1, alien, t1);
  t3 = alien.x;
  if (typeof t3 !== 'number')
    return this.isCaughtInExplosion$1$bailout(2, alien, t3, t1);
  t5 = t1 - t3;
  t5 *= t1 - t3;
  t6 = this.y;
  if (typeof t6 !== 'number')
    return this.isCaughtInExplosion$1$bailout(5, alien, t6, t5);
  t8 = alien.y;
  if (typeof t8 !== 'number')
    return this.isCaughtInExplosion$1$bailout(6, alien, t6, t5, t8);
  t10 = t6 - t8;
  distance_squared = t5 + t10 * (t6 - t8);
  t5 = this.radius;
  if (typeof t5 !== 'number')
    return this.isCaughtInExplosion$1$bailout(9, distance_squared, alien, t5);
  t12 = alien.radius;
  if (typeof t12 !== 'number')
    return this.isCaughtInExplosion$1$bailout(10, distance_squared, alien, t12, t5);
  t14 = t5 + t12;
  return distance_squared < t14 * (t5 + t12);
},
 isCaughtInExplosion$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env1;
      alien = env0;
      break;
    case 2:
      t1 = env2;
      t3 = env1;
      alien = env0;
      break;
    case 3:
      t3 = env2;
      t1 = env1;
      alien = env0;
      break;
    case 4:
      t3 = env3;
      t6 = env2;
      t1 = env1;
      alien = env0;
      break;
    case 5:
      t3 = env2;
      t8 = env1;
      alien = env0;
      break;
    case 6:
      t10 = env3;
      t3 = env2;
      t8 = env1;
      alien = env0;
      break;
    case 7:
      t8 = env3;
      t3 = env2;
      t10 = env1;
      alien = env0;
      break;
    case 8:
      t13 = env4;
      t8 = env3;
      t3 = env2;
      t10 = env1;
      alien = env0;
      break;
    case 9:
      t3 = env2;
      alien = env1;
      distance_squared = env0;
      break;
    case 10:
      t3 = env3;
      t16 = env2;
      alien = env1;
      distance_squared = env0;
      break;
    case 11:
      t16 = env3;
      alien = env2;
      t3 = env1;
      distance_squared = env0;
      break;
    case 12:
      t16 = env3;
      t19 = env2;
      t3 = env1;
      distance_squared = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.x;
    case 1:
      state0 = 0;
      t3 = alien.x;
    case 2:
      state0 = 0;
      t3 = $.sub(t1, t3);
      t1 = this.x;
    case 3:
      state0 = 0;
      t6 = alien.x;
    case 4:
      state0 = 0;
      t3 = $.mul(t3, $.sub(t1, t6));
      t8 = this.y;
    case 5:
      state0 = 0;
      t10 = alien.y;
    case 6:
      state0 = 0;
      t10 = $.sub(t8, t10);
      t8 = this.y;
    case 7:
      state0 = 0;
      t13 = alien.y;
    case 8:
      state0 = 0;
      distance_squared = $.add(t3, $.mul(t10, $.sub(t8, t13)));
      t3 = this.radius;
    case 9:
      state0 = 0;
      t16 = alien.radius;
    case 10:
      state0 = 0;
      t16 = $.add(t3, t16);
      t3 = this.radius;
    case 11:
      state0 = 0;
      t19 = alien.radius;
    case 12:
      var t1, alien, t3, t6, t8, t10, t13, distance_squared, t16, t19;
      state0 = 0;
      return $.lt(distance_squared, $.mul(t16, $.add(t3, t19)));
  }
},
 draw$1: function(ctx) {
  var t1, t2, t3, t4, t5;
  t1 = this.animation;
  t2 = this.game.get$clockTick();
  t3 = this.x;
  t4 = this.y;
  t5 = t1.currentFrame$0();
  if (typeof t5 !== 'number')
    return this.draw$1$bailout2(1, ctx, t2, t1, t3, t4, t5);
  t1.drawFrame$5(t2, ctx, t3, t4, 1 + t5 / 3);
  $.GameEntity.prototype.draw$1.call(this, ctx);
},
 draw$1$bailout2: function(state0, ctx, t2, t1, t3, t4, t5) {
  t5 = $.div(t5, 3);
  if (typeof t5 !== 'number')
    throw $.iae(t5);
  t1.drawFrame$5(t2, ctx, t3, t4, 1 + t5);
  $.GameEntity.prototype.draw$1.call(this, ctx);
},
 BulletExplosion$3: function(game, x, y) {
  this.sprite = game.get$assetManager().getAsset$1("img/explosion.png");
  this.animation = $.Animation$(this.sprite, 34, 0.05, false);
  this.radius = $.div(this.animation.frameWidth, 2);
}
};

$$.Earth = {"":"GameEntity;game,x,y,removeFromWorld,sprite,radius",
 draw$1: function(ctx) {
  var t1, t2, t4, t6, t8;
  t1 = this.sprite;
  t2 = this.x;
  if (typeof t2 !== 'number')
    return this.draw$1$bailout0(1, ctx, t1, t2);
  t4 = t1.get$width();
  if (typeof t4 !== 'number')
    return this.draw$1$bailout0(2, ctx, t4, t1, t2);
  t2 -= t4 / 2;
  t6 = this.y;
  if (typeof t6 !== 'number')
    return this.draw$1$bailout0(3, ctx, t6, t2, t1);
  t8 = this.sprite.get$height();
  if (typeof t8 !== 'number')
    return this.draw$1$bailout0(4, ctx, t6, t2, t1, t8);
  ctx.drawImage$3(t1, t2, t6 - t8 / 2);
},
 draw$1$bailout0: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t2 = env2;
      t1 = env1;
      ctx = env0;
      break;
    case 2:
      t2 = env3;
      t1 = env2;
      t4 = env1;
      ctx = env0;
      break;
    case 3:
      t1 = env3;
      t2 = env2;
      t6 = env1;
      ctx = env0;
      break;
    case 4:
      t8 = env4;
      t1 = env3;
      t2 = env2;
      t6 = env1;
      ctx = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.sprite;
      t2 = this.x;
    case 1:
      state0 = 0;
      t4 = t1.get$width();
    case 2:
      state0 = 0;
      t2 = $.sub(t2, $.div(t4, 2));
      t6 = this.y;
    case 3:
      state0 = 0;
      t8 = this.sprite.get$height();
    case 4:
      var t1, t2, ctx, t4, t6, t8;
      state0 = 0;
      ctx.drawImage$3(t1, t2, $.sub(t6, $.div(t8, 2)));
  }
},
 Earth$1: function(game) {
  this.sprite = game.get$assetManager().getAsset$1("img/earth.png");
}
};

$$.EvilAliens = {"":"Game;lives=,score=,sentry,earth,lastAlienAddedAt,random,entities,ctx,click,mouse,timer,clockTick,surfaceWidth,surfaceHeight,halfSurfaceWidth,halfSurfaceHeight,clientBoundingRect,assetManager,showOutlines",
 start$0: function() {
  this.sentry = $.Sentry$(this);
  this.earth = $.Earth$(this);
  this.addEntity$1(this.earth);
  this.addEntity$1(this.sentry);
  $.Game.prototype.start$0.call(this);
},
 update$0: function() {
  var t1, t2, t3;
  t1 = this.lastAlienAddedAt;
  if (!(t1 == null)) {
    t2 = this.timer.gameTime;
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    t3 = t2 - t1 > 1;
    t1 = t3;
  } else
    t1 = true;
  if (t1) {
    t1 = this.ctx.get$canvas().get$width();
    t2 = this.random.nextDouble$0();
    if (typeof t2 !== 'number')
      return this.update$0$bailout2(1, t2, t1);
    this.addEntity$1($.Alien$(this, t1, t2 * 3.141592653589793 * 180));
    this.lastAlienAddedAt = this.timer.gameTime;
  }
  t1 = this.score;
  if (typeof t1 !== 'number')
    return this.update$0$bailout2(2, t1);
  if (t1 <= 0)
    ;
  $.Game.prototype.update$0.call(this);
},
 update$0$bailout2: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      t2 = env0;
      break;
    case 2:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.lastAlienAddedAt;
      if (!(t1 == null)) {
        t2 = this.timer.gameTime;
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        t3 = t2 - t1 > 1;
        t1 = t3;
      } else
        t1 = true;
    case 1:
      if (state0 === 1 || state0 === 0 && t1)
        switch (state0) {
          case 0:
            t1 = this.ctx.get$canvas().get$width();
            t2 = this.random.nextDouble$0();
          case 1:
            state0 = 0;
            this.addEntity$1($.Alien$(this, t1, $.mul($.mul(t2, 3.141592653589793), 180)));
            this.lastAlienAddedAt = this.timer.gameTime;
        }
      t1 = this.score;
    case 2:
      var t1, t2, t3;
      state0 = 0;
      if ($.leB(t1, 0))
        ;
      $.Game.prototype.update$0.call(this);
  }
},
 drawBeforeCtxRestore$0: function() {
  this.drawScore$0();
  this.drawLives$0();
},
 drawLives$0: function() {
  this.ctx.set$fillStyle("red");
  this.ctx.set$font("bold 2em Arial");
  this.ctx.fillText$3("Lives: " + $.S(this.lives), $.add($.div($.neg(this.ctx.get$canvas().get$width()), 2), 50), $.sub($.div(this.ctx.get$canvas().get$height(), 2), 80));
},
 drawScore$0: function() {
  this.ctx.set$fillStyle("red");
  this.ctx.set$font("bold 2em Arial");
  this.ctx.fillText$3("Score: " + $.S(this.score), $.add($.div($.neg(this.ctx.get$canvas().get$width()), 2), 50), $.sub($.div(this.ctx.get$canvas().get$height(), 2), 50));
}
};

$$.AbstractWorkerEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.BatteryManagerEvents = {"":"Events;_ptr"
};

$$.BodyElementEvents = {"":"ElementEvents;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
}
};

$$.DOMApplicationCacheEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.DedicatedWorkerContextEvents = {"":"WorkerContextEvents;_ptr"
};

$$.DocumentEvents = {"":"ElementEvents;_ptr"
};

$$.ElementEvents = {"":"Events;_ptr",
 get$click: function() {
  return this.operator$index$1("click");
},
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 get$mouseMove: function() {
  return this.operator$index$1("mousemove");
}
};

$$.EventSourceEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.Events = {"":"Object;_ptr",
 operator$index$1: function(type) {
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {"":"Object;_ptr,_type",
 add$2: function(listener, useCapture) {
  this._ptr.$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener, false);
}
};

$$.FileReaderEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
}
};

$$.FileWriterEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.FrameSetElementEvents = {"":"ElementEvents;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
}
};

$$.HttpRequestEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
}
};

$$.HttpRequestUploadEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
}
};

$$.IDBDatabaseEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.IDBOpenDBRequestEvents = {"":"IDBRequestEvents;_ptr"
};

$$.IDBRequestEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.IDBTransactionEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.IDBVersionChangeRequestEvents = {"":"IDBRequestEvents;_ptr"
};

$$.InputElementEvents = {"":"ElementEvents;_ptr"
};

$$.LocalWindowEvents = {"":"Events;_ptr",
 get$click: function() {
  return this.operator$index$1("click");
},
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 get$mouseMove: function() {
  return this.operator$index$1("mousemove");
}
};

$$.MediaElementEvents = {"":"ElementEvents;_ptr"
};

$$.MediaStreamEvents = {"":"Events;_ptr"
};

$$.MediaStreamTrackEvents = {"":"Events;_ptr"
};

$$.MediaStreamTrackListEvents = {"":"Events;_ptr"
};

$$.MessagePortEvents = {"":"Events;_ptr"
};

$$.NotificationEvents = {"":"Events;_ptr",
 get$click: function() {
  return this.operator$index$1("click");
},
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.PeerConnection00Events = {"":"Events;_ptr"
};

$$.RTCDataChannelEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.RTCPeerConnectionEvents = {"":"Events;_ptr"
};

$$.SharedWorkerContextEvents = {"":"WorkerContextEvents;_ptr"
};

$$.SpeechRecognitionEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
},
 get$start: function() {
  return this.operator$index$1("start");
},
 start$0: function() { return this.get$start().call$0(); }
};

$$.TextTrackEvents = {"":"Events;_ptr"
};

$$.TextTrackCueEvents = {"":"Events;_ptr"
};

$$.TextTrackListEvents = {"":"Events;_ptr"
};

$$.WebSocketEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.WorkerEvents = {"":"AbstractWorkerEvents;_ptr"
};

$$.WorkerContextEvents = {"":"Events;_ptr",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$._DOMWindowCrossFrame = {"":"Object;_window",
 get$top: function() {
  return $._DOMWindowCrossFrame__createSafe(this._window.top);
}
};

$$.FixedSizeListIterator = {"":"_VariableSizeListIterator;_length,_array,_pos",
 get$hasNext: function() {
  return $.gt(this._length, this._pos);
}
};

$$._VariableSizeListIterator = {"":"Object;",
 get$hasNext: function() {
  var t1 = this._array;
  return $.gt($.getInterceptor$JSStringJSArray(t1).get$length(t1), this._pos);
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._pos;
  if (typeof t3 !== 'number')
    return this.next$0$bailout(2, t3, t1);
  this._pos = t3 + 1;
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.get$hasNext() !== true)
        throw $.$$throw($.StateError$("No more elements"));
      t1 = this._array;
    case 1:
      state0 = 0;
      t3 = this._pos;
    case 2:
      var t1, t3;
      state0 = 0;
      this._pos = $.add(t3, 1);
      return $.index(t1, t3);
  }
}
};

$$._Random = {"":"Object;",
 nextDouble$0: function() {
  return Math.random();
}
};

$$.ElementInstanceEvents = {"":"Events;_ptr",
 get$click: function() {
  return this.operator$index$1("click");
},
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 get$mouseMove: function() {
  return this.operator$index$1("mousemove");
}
};

$$.AudioContextEvents = {"":"Events;_ptr"
};

$$.ScriptProcessorNodeEvents = {"":"Events;_ptr"
};

$$.main_anon = {"":"Closure;game_1,ctx_0",
 call$0: function() {
  var t1 = this.game_1;
  t1.init$1(this.ctx_0);
  t1.start$0();
}
};

$$.AssetManager_downloadAll_anon = {"":"Closure;img_2,downloadCallback_1,this_0",
 call$1: function(event$) {
  var t1, t2;
  $.print($.S(this.img_2.get$src()) + " is loaded");
  t1 = this.this_0;
  t1.set$successCount($.add(t1.get$successCount(), 1));
  t2 = t1.get$downloadQueue();
  if ($.eqB($.getInterceptor$JSStringJSArray(t2).get$length(t2), $.add(t1.get$successCount(), t1.get$errorCount())))
    this.downloadCallback_1.call$0();
}
};

$$.AssetManager_downloadAll_anon0 = {"":"Closure;downloadCallback_4,this_3",
 call$1: function(event$) {
  var t1, t2;
  t1 = this.this_3;
  t1.set$errorCount($.add(t1.get$errorCount(), 1));
  t2 = t1.get$downloadQueue();
  if ($.eqB($.getInterceptor$JSStringJSArray(t2).get$length(t2), $.add(t1.get$successCount(), t1.get$errorCount())))
    this.downloadCallback_4.call$0();
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"":"Closure;copies_3,values_2",
 call$1: function(value) {
  var t1, t3, length$, i, t2;
  t1 = this.values_2;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout0(1, value, t1);
  t3 = $.getInterceptor$JSStringJSArray(t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t3.add$1(t1, value);
  t1 = this.copies_3;
  $.getInterceptor$JSArray(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout0: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      value = env0;
      break;
    case 2:
      length$ = env2;
      t1 = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.values_2;
    case 1:
      state0 = 0;
      length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    case 2:
      var t1, value, length$, i, t2;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        t2 = $.index(t1, i);
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      $.getInterceptor$JSArray(t1).add$1(t1, value);
      t1 = this.copies_3;
      $.getInterceptor$JSArray(t1).add$1(t1, null);
      return length$;
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"":"Closure;copies_4",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"":"Closure;copies_5",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"":"Closure;",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"":"Closure;findSlot_8,writeSlot_7,readSlot_6",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, copy0, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$("structured clone of Date"));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_8.call$1(e);
    t1.copy_1 = this.readSlot_6.call$1(slot);
    t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_7.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_8.call$1(e);
    t2 = this.readSlot_6;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_7.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_7;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy0 = t2.call$1(slot);
          if (true === copy0) {
            copy0 = new Array(length$);
            t3.call$2(slot, copy0);
          }
          if (typeof copy0 !== 'object' || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(3, e, t3, elementCopy, length$, copy0, slot, t2, copy, i);
          for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy0[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy0[i] = elementCopy;
          ++i;
          copy = copy0;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(4, e, length$, i, copy);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$("structured clone of other type"));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      length$ = env1;
      e = env0;
      break;
    case 3:
      i = env8;
      copy = env7;
      t3 = env6;
      slot = env5;
      copy0 = env4;
      length$ = env3;
      elementCopy = env2;
      t2 = env1;
      e = env0;
      break;
    case 4:
      copy = env3;
      i = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$("structured clone of Date"));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_8.call$1(e);
        t1.copy_1 = this.readSlot_6.call$1(slot);
        t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_7.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
        return t1.copy_1;
      }
    default:
      var t1, slot, t2, e, length$, t3, copy, i, element, elementCopy, copy0, j;
      if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            length$ = $.getInterceptor$JSStringJSArray(e).get$length(e);
          case 2:
            state0 = 0;
            slot = this.findSlot_8.call$1(e);
            t3 = this.readSlot_6;
            copy = t3.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_7.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t2 = this.writeSlot_7;
          case 3:
            if (state0 === 3 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t2.call$2(slot, true);
                  i = 0;
                case 3:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = $.index(e, i);
                          elementCopy = this.call$1(element);
                        case 3:
                          if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy0 = t3.call$1(slot);
                                if (true === copy0) {
                                  copy0 = new Array(length$);
                                  t2.call$2(slot, copy0);
                                }
                              case 3:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy0, j, $.index(e, j));
                                $.indexSet(copy0, i, elementCopy);
                                ++i;
                                copy = copy0;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t2.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t2.call$2(slot, copy);
              i = 0;
            }
          case 4:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"":"Closure;box_0,walk_9",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.Maps__emitMap_anon = {"":"Closure;visiting_3,box_0,result_2",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_1 !== true) {
    t2 = this.result_2;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t1.first_1 = false;
  t1 = this.result_2;
  t2 = this.visiting_3;
  $.Collections__emitObject(k, t1, t2);
  $.getInterceptor$JSArray(t1).add$1(t1, ": ");
  $.Collections__emitObject(v, t1, t2);
}
};

$$.invokeClosure_anon = {"":"Closure;closure_0",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"":"Closure;arg1_2,closure_1",
 call$0: function() {
  return this.closure_1.call$1(this.arg1_2);
}
};

$$.invokeClosure_anon1 = {"":"Closure;arg1_5,arg2_4,closure_3",
 call$0: function() {
  return this.closure_3.call$2(this.arg1_5, this.arg2_4);
}
};

$$._LinkedHashMapImpl_forEach_anon = {"":"Closure;f_0",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.DoubleLinkedQueue_length_anon = {"":"Closure;box_0",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$.NoSuchMethodError_toString_anon = {"":"Closure;box_0",
 call$2: function(key, value) {
  var t1, t2;
  t1 = this.box_0;
  if ($.gtB(t1.i_2, 0)) {
    t2 = t1.sb_1;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t2 = t1.sb_1;
  $.getInterceptor$JSArray(t2).add$1(t2, key);
  t2 = t1.sb_1;
  $.getInterceptor$JSArray(t2).add$1(t2, ": ");
  t2 = t1.sb_1;
  $.getInterceptor$JSArray(t2).add$1(t2, $.Error_safeToString(value));
  t1.i_2 = $.add(t1.i_2, 1);
}
};

$$._DateImpl_toString_fourDigits = {"":"Closure;",
 call$1: function(n) {
  var absN, sign;
  absN = $.getInterceptor$JSNumber(n).abs$0(n);
  sign = $.ltB(n, 0) ? "-" : "";
  if ($.geB(absN, 1000))
    return $.S(n);
  if ($.geB(absN, 100))
    return sign + "0" + $.S(absN);
  if ($.geB(absN, 10))
    return sign + "00" + $.S(absN);
  return sign + "000" + $.S(absN);
}
};

$$._DateImpl_toString_threeDigits = {"":"Closure;",
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.geB(n, 10))
    return "0" + $.S(n);
  return "00" + $.S(n);
}
};

$$._DateImpl_toString_twoDigits = {"":"Closure;",
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return "0" + $.S(n);
}
};

$$.Game_startInput_getXandY = {"":"Closure;this_0",
 call$1: function(e) {
  var t1, t2;
  t1 = e.get$clientX();
  t2 = this.this_0;
  return $.GamePoint$($.sub($.sub(t1, t2.get$clientBoundingRect().get$x()), $.div(t2.get$ctx().get$canvas().get$width(), 2)), $.sub($.sub(e.get$clientY(), t2.get$clientBoundingRect().get$y()), $.div(t2.get$ctx().get$canvas().get$height(), 2)));
}
};

$$.Game_startInput_anon = {"":"Closure;getXandY_2,this_1",
 call$1: function(e) {
  var t1 = this.getXandY_2.call$1(e);
  this.this_1.set$click(t1);
}
};

$$.Game_startInput_anon0 = {"":"Closure;getXandY_4,this_3",
 call$1: function(e) {
  var t1 = this.getXandY_4.call$1(e);
  this.this_3.set$mouse(t1);
}
};

$$.Closure = {"":"Object;",
 toString$0: function() {
  return "Closure";
}
};

$$.BoundClosure = {'':
"Closure;self,target",
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
"Closure;self,target",
call$0: function() { return this.self[this.target](); }
};
$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'string' && (typeof strings !== 'object' || strings === null || strings.constructor !== Array && !strings.is$JavaScriptIndexingBehavior()))
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $.List_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.CTC0.truncate$0(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.getInterceptor$JSStringJSArray(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.getInterceptor$JSStringJSArray(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, "indexed set");
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.DOMApplicationCacheEvents$ = function(_ptr) {
  return new $.DOMApplicationCacheEvents(_ptr);
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$.checkString = function(value) {
  if (!(typeof value === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CTC;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  var t1 = this.dartException;
  return $.getInterceptor(t1).toString$0(t1);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.CTC0.truncate$0(a / b);
  return a.operator$tdiv$1(b);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.CTC5.endsWith$1(message, "is null") === true || $.CTC5.endsWith$1(message, "is undefined") === true || $.CTC5.endsWith$1(message, "is null or undefined") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" is not a function") === -1)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === 'string' ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.CTC1.iterator$0(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return new $.invokeClosure_anon(closure).call$0();
  else if ($.eqB(numberOfArguments, 1))
    return new $.invokeClosure_anon0(arg1, closure).call$0();
  else if ($.eqB(numberOfArguments, 2))
    return new $.invokeClosure_anon1(arg1, arg2, closure).call$0();
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $, arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.operator$negate$0();
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CTC7)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, t2, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (multiLine === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "m");
  }
  if (ignoreCase === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, method, i, entry, proto;
  tag = $.getTypeNameOf(obj);
  method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if (entry.get$_set()[tag]) {
        method = methods[entry.get$_tag()];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods["Object"];
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, t1, i;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer_StringBuffer("");
      length$ = receiver.length;
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        t1.add$1(result, receiver[i]);
        t1.add$1(result, to);
      }
      return t1.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator($.getInterceptor$JSStringJSArray(array).get$length(array), array, 0);
};

$.Alien$ = function(game, radialDistance, angle) {
  var t1 = new $.Alien(radialDistance, angle, 100, game, null, null, false, null, null);
  t1.Alien$3(game, radialDistance, angle);
  return t1;
};

$.LocalWindowEvents$ = function(_ptr) {
  return new $.LocalWindowEvents(_ptr);
};

$.print = function(object) {
  $.Primitives_printString(object);
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Bullet$ = function(game, x, y, angle, explodesAt) {
  var t1 = new $.Bullet(angle, explodesAt, 95, null, game, x, y, false, null, null);
  t1.Bullet$5(game, x, y, angle, explodesAt);
  return t1;
};

$.Animation$ = function(spriteSheet, frameWidth, frameDuration, loop) {
  var t1 = new $.Animation(spriteSheet, frameWidth, null, frameDuration, null, loop, 0);
  t1.Animation$4$loop(spriteSheet, frameWidth, frameDuration, loop);
  return t1;
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.ElementInstanceEvents$ = function(_ptr) {
  return new $.ElementInstanceEvents(_ptr);
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$.main = function() {
  var ctx, assetManager;
  ctx = $.query("#surface").get$context2d();
  assetManager = $.AssetManager$();
  assetManager.queueDownload$1("img/alien-explosion.png");
  assetManager.queueDownload$1("img/alien.png");
  assetManager.queueDownload$1("img/bullet.png");
  assetManager.queueDownload$1("img/earth.png");
  assetManager.queueDownload$1("img/sentry.png");
  assetManager.queueDownload$1("img/explosion.png");
  assetManager.downloadAll$1(new $.main_anon($.EvilAliens$(assetManager), ctx));
};

$.document = function() {
  return document;
};

$.query = function(selector) {
  return $.document().query$1(selector);
};

$.window = function() {
  return window;
};

$.CanvasElement_CanvasElement = function(height, width) {
  var e = $.document().$dom_createElement$1("canvas");
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$.BulletExplosion$ = function(game, x, y) {
  var t1 = new $.BulletExplosion(null, game, x, y, false, null, null);
  t1.BulletExplosion$3(game, x, y);
  return t1;
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$.AlienExplosion$ = function(game, x, y) {
  var t1 = new $.AlienExplosion(null, game, x, y, false, null, null);
  t1.AlienExplosion$3(game, x, y);
  return t1;
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$._DateImpl$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $._DateImpl(millisecondsSinceEpoch, isUtc);
  t1._DateImpl$fromMillisecondsSinceEpoch$2(millisecondsSinceEpoch, isUtc);
  return t1;
};

$._DateImpl$now = function() {
  var t1 = new $._DateImpl($.Primitives_dateNow(), false);
  t1._DateImpl$now$0();
  return t1;
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  return new $.MediaStreamTrackListEvents(_ptr);
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$.Date_Date$now = function() {
  return $._DateImpl$now();
};

$.Date_Date$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  return $._DateImpl$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc);
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t3, t2).call$1(value);
  t4.call$0();
  return copy;
};

$.ImageElement_ImageElement = function(height, src, width) {
  var e = $.document().$dom_createElement$1("img");
  if (!(src == null))
    e.set$src(src);
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.sin = function(x) {
  return Math.sin($.checkNum(x));
};

$.cos = function(x) {
  return Math.cos($.checkNum(x));
};

$.max = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return a + b;
        if ($.CTC6.get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.CTC0.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.atan2 = function(a, b) {
  return Math.atan2($.checkNum(a), $.checkNum(b));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$.PeerConnection00Events$ = function(_ptr) {
  return new $.PeerConnection00Events(_ptr);
};

$.FrameSetElementEvents$ = function(_ptr) {
  return new $.FrameSetElementEvents(_ptr);
};

$.min = function(a, b) {
  if (typeof a === 'number') {
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof a === 'number')
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0 && $.CTC6.get$isNegative(b) === true || $.CTC6.get$isNaN(b) === true)
      return b;
    return a;
    return a;
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$.RTCDataChannelEvents$ = function(_ptr) {
  return new $.RTCDataChannelEvents(_ptr);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.RTCPeerConnectionEvents$ = function(_ptr) {
  return new $.RTCPeerConnectionEvents(_ptr);
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$.ScriptProcessorNodeEvents$ = function(_ptr) {
  return new $.ScriptProcessorNodeEvents(_ptr);
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.AssetManager$ = function() {
  return new $.AssetManager(0, 0, $.makeLiteralMap([]), []);
};

$.EvilAliens$ = function(assetManager) {
  return new $.EvilAliens(10, 0, null, null, null, $.Random_Random(null), [], null, null, null, $.Timer$(), null, null, null, null, null, null, assetManager, false);
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.List_List = function(length$) {
  return $.Primitives_newList(length$);
};

$.IDBDatabaseEvents$ = function(_ptr) {
  return new $.IDBDatabaseEvents(_ptr);
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.Random_Random = function(seed) {
  return $.CTC2;
};

$.Timer$ = function() {
  return new $.Timer(0, 0);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.Earth$ = function(game) {
  var t1 = new $.Earth(game, 0, 0, false, null, null);
  t1.Earth$1(game);
  return t1;
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === 'string') {
    t1 = $.CTC5.replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return $.Primitives_objectToString(object);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$.GamePoint$ = function(x, y) {
  return new $.GamePoint(x, y);
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$.Sentry$ = function(game) {
  var t1 = new $.Sentry(0, game, 0, 85, false, null, null);
  t1.Sentry$1(game);
  return t1;
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.RegExp_RegExp = function(pattern, ignoreCase, multiLine) {
  return $.JSSyntaxRegExp$(pattern, ignoreCase, multiLine);
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.IDBOpenDBRequestEvents$ = function(_ptr) {
  return new $.IDBOpenDBRequestEvents(_ptr);
};

$.IDBRequestEvents$ = function(_ptr) {
  return new $.IDBRequestEvents(_ptr);
};

$.IDBTransactionEvents$ = function(_ptr) {
  return new $.IDBTransactionEvents(_ptr);
};

$.IDBVersionChangeRequestEvents$ = function(_ptr) {
  return new $.IDBVersionChangeRequestEvents(_ptr);
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.CTC1.iterator$0(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer("");
  $.Collections__emitCollection(c, result, $.List_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  t2 = $.getInterceptor$JSArray(result);
  t2.add$1(result, isList ? "[" : "{");
  for (t3 = $.getInterceptor$JSArray(c).iterator$0(c), first = true; t3.get$hasNext() === true; first = false) {
    t4 = t3.next$0();
    if (!first)
      t2.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t2.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}");
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor$JSArray(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor$JSArray(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(c).iterator$0(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer("");
  $.Maps__emitMap(m, result, $.List_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_1 = true;
  $.getInterceptor$JSArray(m).forEach$1(m, new $.Maps__emitMap_anon(visiting, t1, result));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if ("\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n" === string)
    $.Primitives_mirrorsEnabled = true;
  else if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled, t1;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  t1 = $.getInterceptor$JSString(name$);
  return t1.charCodeAt$1(name$, 0) === 36 ? t1.substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env1;
      strings = env0;
      break;
    case 3:
      length$ = env2;
      array = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      length$ = $.getInterceptor$JSStringJSArray(strings).get$length(strings);
    case 2:
      state0 = 0;
    case 3:
      var strings, length$, i, string, array;
      if (state0 === 0 && $.isJsArray(strings)) {
        for (i = 0; $.ltB(i, length$); ++i) {
          string = $.index(strings, i);
          if (!(typeof string === 'string'))
            throw $.$$throw($.ArgumentError$(string));
        }
        array = strings;
      } else
        switch (state0) {
          case 0:
            array = $.List_List(length$);
          case 3:
            state0 = 0;
            for (i = 0; $.ltB(i, length$); ++i) {
              string = $.index(strings, i);
              if (!(typeof string === 'string'))
                throw $.$$throw($.ArgumentError$(string));
              $.indexSet(array, i, string);
            }
        }
      return array;
  }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
};

$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
Isolate.$finishClasses($$);
$$ = {};
$.CTC3 = new Isolate.$isolateProperties.JSInt();
$.CTC6 = new Isolate.$isolateProperties.JSDouble();
$.CTC5 = new Isolate.$isolateProperties.JSString();
$.CTC = new Isolate.$isolateProperties.NullThrownError();
$.CTC2 = new Isolate.$isolateProperties._Random();
$.CTC7 = new Isolate.$isolateProperties.Object();
$.CTC4 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC1 = new Isolate.$isolateProperties.JSArray();
$.CTC0 = new Isolate.$isolateProperties.JSNumber();
$.PI = 3.141592653589793;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$._getTypeNameOf = null;
$.MIRROR_OPT_IN_MESSAGE = "\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n";
$.Primitives_hashCodeSeed = 0;
$.Primitives_mirrorsEnabled = false;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$._DateImpl__MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CTC4;
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == 'number') return $.JSNumber.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  if (typeof receiver == 'number') return $.JSNumber.prototype;
  if (typeof receiver == 'number' && Math.floor(receiver) == receiver) return $.JSInt.prototype;
  if (typeof receiver == 'number') return $.JSDouble.prototype;
  if (receiver == null) return $.JSNull.prototype;
  if (typeof receiver == 'function') return $.JSFunction.prototype;
  if (typeof receiver == 'boolean') return $.JSBool.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", false, false);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    generateGetterSetter(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {        if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$List: function() { return false; },
 is$File: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Blob: function() { return false; },
 is$ImageData: function() { return false; },
 is$Collection: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$Map: function() { return false; },
 is$_FileList: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); }
});

$.$defineNativeClass('AbstractWorker', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.AbstractWorkerEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAnchorElement', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLAppletElement', {"":"height=,width="
});

$.$defineNativeClass('ArrayBuffer', {
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"":"value="
});

$.$defineNativeClass('HTMLBRElement', {
 clear$0: function() { return this.clear.call$0(); }
});

$.$defineNativeClass('BatteryManager', {
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Blob', {
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {
 get$on: function() {
  return $.BodyElementEvents$(this);
}
});

$.$defineNativeClass('HTMLButtonElement', {"":"value="
});

$.$defineNativeClass('WebKitCSSMatrix', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSStyleDeclaration', {"":"length?",
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : "";
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 get$clear: function() {
  return this.getPropertyValue$1("clear");
},
 clear$0: function() { return this.get$clear().call$0(); },
 set$font: function(value) {
  this.setProperty$3("font", value, "");
},
 get$height: function() {
  return this.getPropertyValue$1("height");
},
 set$height: function(value) {
  this.setProperty$3("height", value, "");
},
 get$left: function() {
  return this.getPropertyValue$1("left");
},
 get$src: function() {
  return this.getPropertyValue$1("src");
},
 set$src: function(value) {
  this.setProperty$3("src", value, "");
},
 get$top: function() {
  return this.getPropertyValue$1("top");
},
 get$width: function() {
  return this.getPropertyValue$1("width");
},
 set$width: function(value) {
  this.setProperty$3("width", value, "");
}
});

$.$defineNativeClass('HTMLCanvasElement', {"":"height=,width=",
 getContext$1: function(contextId) {
  return this.getContext(contextId);
},
 get$context2d: function() {
  return this.getContext$1("2d");
}
});

$.$defineNativeClass('CanvasRenderingContext', {"":"canvas?"
});

$.$defineNativeClass('CanvasRenderingContext2D', {"":"fillStyle!,font!,strokeStyle!",
 arc$6: function(x, y, radius, startAngle, endAngle, anticlockwise) {
  return this.arc(x,y,radius,startAngle,endAngle,anticlockwise);
},
 beginPath$0: function() {
  return this.beginPath();
},
 clearRect$4: function(x, y, width, height) {
  return this.clearRect(x,y,width,height);
},
 closePath$0: function() {
  return this.closePath();
},
 drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
},
 drawImage$3: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y) {
  return this.drawImage(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y);
},
 fillText$4: function(text, x, y, maxWidth) {
  return this.fillText(text,x,y,maxWidth);
},
 fillText$3: function(text, x, y) {
  return this.fillText(text, x, y);
},
 restore$0: function() {
  return this.restore();
},
 rotate$1: function(angle) {
  return this.rotate(angle);
},
 save$0: function() {
  return this.save();
},
 stroke$0: function() {
  return this.stroke();
},
 translate$2: function(tx, ty) {
  return this.translate(tx,ty);
}
});

$.$defineNativeClass('CharacterData', {"":"length?",
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {"":"height?,left?,top?,width?"
});

Console = (typeof console == 'undefined' ? {} : console);
Console.error$1 = function(arg) {
  return this.error(arg);
};
Console.get$error = function() { return new $.BoundClosure(this, 'error$1'); };
$.$defineNativeClass('DOMApplicationCache', {
 get$on: function() {
  return $.DOMApplicationCacheEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 update$0: function() {
  return this.update();
}
});

$.$defineNativeClass('DOMException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('MimeTypeArray', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Plugin', {"":"length?"
});

$.$defineNativeClass('PluginArray', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"":"value="
});

$.$defineNativeClass('DOMTokenList', {"":"length?",
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DataTransferItemList', {"":"length?",
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DedicatedWorkerContext', {
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('Document', {
 get$on: function() {
  return $.DocumentEvents$(this);
},
 $dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 query$1: function(selectors) {
  if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", false, false).hasMatch$1(selectors) === true)
    return this.$dom_getElementById$1($.CTC5.substring$1(selectors, 1));
  return this.$dom_querySelector$1(selectors);
}
});

$.$defineNativeClass('DocumentFragment', {
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$translate: function() {
  return false;
},
 translate$2: function(arg0, arg1) { return this.get$translate().call$2(arg0, arg1); },
 get$parent: function() {
  return;
},
 click$0: function() {
},
 get$click: function() { return new $.BoundClosure0(this, 'click$0'); },
 get$on: function() {
  return $.ElementEvents$(this);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
}
});

$.$defineNativeClass('DocumentType', {"":"entities?",
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('Element', {
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.ElementEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 translate$2: function(arg0, arg1) { return this.translate.call$2(arg0, arg1); },
 click$0: function() {
  return this.click();
},
 get$click: function() { return new $.BoundClosure0(this, 'click$0'); },
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
}
});

$.$defineNativeClass('HTMLEmbedElement', {"":"height=,src=,width="
});

$.$defineNativeClass('EntrySync', {
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('EventException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.Events$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }
}
});

$.$defineNativeClass('File', {
 is$File: function() { return true; }
});

$.$defineNativeClass('FileException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileReader', {"":"error?",
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriter', {"":"error?,length?",
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"":"length?"
});

$.$defineNativeClass('Float32Array', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFormElement', {"":"length?"
});

$.$defineNativeClass('HTMLFrameElement', {"":"height?,src=,width?"
});

$.$defineNativeClass('HTMLFrameSetElement', {
 get$on: function() {
  return $.FrameSetElementEvents$(this);
}
});

$.$defineNativeClass('HTMLHRElement', {"":"width="
});

$.$defineNativeClass('HTMLAllCollection', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
}
});

$.$defineNativeClass('XMLHttpRequest', {
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('XMLHttpRequestException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestUpload', {
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBCursor', {"":"key?"
});

$.$defineNativeClass('IDBCursorWithValue', {"":"value?"
});

$.$defineNativeClass('IDBDatabase', {
 get$on: function() {
  return $.IDBDatabaseEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBObjectStore', {
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
  return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
},
 add$1: function(value) {
  return this.add$2(value, $);
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('IDBOpenDBRequest', {
 get$on: function() {
  return $.IDBOpenDBRequestEvents$(this);
}
});

$.$defineNativeClass('IDBRequest', {"":"error?",
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.IDBRequestEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {"":"error?",
 get$on: function() {
  return $.IDBTransactionEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeRequest', {
 get$on: function() {
  return $.IDBVersionChangeRequestEvents$(this);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"":"height=,src=,width="
});

$.$defineNativeClass('ImageData', {"":"height?,width?",
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"":"height=,src=,width=,x?,y?"
});

$.$defineNativeClass('HTMLInputElement', {"":"height=,pattern?,src=,value=,width=",
 get$on: function() {
  return $.InputElementEvents$(this);
}
});

$.$defineNativeClass('Int16Array', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', {"":"value="
});

$.$defineNativeClass('History', {"":"length?"
});

$.$defineNativeClass('Location', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMWindow', {
 requestAnimationFrame$1: function(callback) {
  this._ensureRequestAnimationFrame$0();
  return this._requestAnimationFrame$1(callback);
},
 _requestAnimationFrame$1: function(callback) {
  return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
},
 _ensureRequestAnimationFrame$0: function() {
  if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
    return;
    (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
},
 get$on: function() {
  return $.LocalWindowEvents$(this);
},
 get$top: function() {
  return $._convertNativeToDart_Window(this.top);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMarqueeElement', {"":"height=,width=",
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('MediaController', {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', {"":"error?,src=",
 get$on: function() {
  return $.MediaElementEvents$(this);
},
 load$0: function() {
  return this.load();
},
 get$load: function() { return new $.BoundClosure0(this, 'load$0'); }
});

$.$defineNativeClass('MediaList', {"":"length?"
});

$.$defineNativeClass('MediaSource', {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrack', {
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackList', {"":"length?",
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MessagePort', {
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('HTMLMeterElement', {"":"value="
});

$.$defineNativeClass('MouseEvent', {"":"clientX?,clientY?,x?,y?"
});

$.$defineNativeClass('NamedNodeMap', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Node', {
 get$parent: function() { return this.parentNode; },
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
    if (!(this.get$parent() == null))
      this.get$parent().$dom_removeChild$1(this);
  } else {
    return Object.prototype.remove$0.call(this);
  }
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
}
});

$.$defineNativeClass('NodeList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Notification', {
 get$on: function() {
  return $.NotificationEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLOListElement', {
 start$0: function() { return this.start.call$0(); }
});

$.$defineNativeClass('HTMLObjectElement', {"":"height=,width="
});

$.$defineNativeClass('HTMLOptionElement', {"":"value="
});

$.$defineNativeClass('HTMLOutputElement', {"":"value="
});

$.$defineNativeClass('HTMLParamElement', {"":"value="
});

$.$defineNativeClass('PeerConnection00', {
 get$on: function() {
  return $.PeerConnection00Events$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebKitPoint', {"":"x?,y?"
});

$.$defineNativeClass('HTMLPreElement', {"":"width="
});

$.$defineNativeClass('HTMLProgressElement', {"":"value="
});

$.$defineNativeClass('RTCDataChannel', {
 get$on: function() {
  return $.RTCDataChannelEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCPeerConnection', {
 get$on: function() {
  return $.RTCPeerConnectionEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RadioNodeList', {"":"value="
});

$.$defineNativeClass('Range', {
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Rect', {"":"left?,top?"
});

$.$defineNativeClass('SQLResultSetRowList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Screen', {"":"height?,width?"
});

$.$defineNativeClass('HTMLScriptElement', {"":"src="
});

$.$defineNativeClass('HTMLSelectElement', {"":"length=,value="
});

$.$defineNativeClass('SharedWorkerContext', {
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('SourceBufferList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"":"src="
});

$.$defineNativeClass('SpeechGrammar', {"":"src="
});

$.$defineNativeClass('SpeechGrammarList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognition', {
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('SpeechRecognitionResult', {"":"length?"
});

$.$defineNativeClass('Storage', {
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1(key);
},
 operator$indexSet$2: function(key, value) {
  this.$dom_setItem$2(key, value);
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$length: function() {
  return this.length;
},
 get$isEmpty: function() {
  return this.$dom_key$1(0) == null;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"":"key?"
});

$.$defineNativeClass('HTMLTableCellElement', {"":"height=,width="
});

$.$defineNativeClass('HTMLTableColElement', {"":"width="
});

$.$defineNativeClass('HTMLTableElement', {"":"width="
});

$.$defineNativeClass('HTMLTextAreaElement', {"":"value="
});

$.$defineNativeClass('TextMetrics', {"":"width?"
});

$.$defineNativeClass('TextTrack', {
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', {
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {"":"length?",
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"":"length?"
});

$.$defineNativeClass('Touch', {"":"clientX?,clientY?"
});

$.$defineNativeClass('TouchList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"":"src="
});

$.$defineNativeClass('Uint16Array', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLVideoElement', {"":"height=,width="
});

$.$defineNativeClass('WebKitNamedFlow', {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Worker', {
 get$on: function() {
  return $.WorkerEvents$(this);
}
});

$.$defineNativeClass('WorkerContext', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.WorkerContextEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WorkerLocation', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XPathException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSRuleList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('ClientRectList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMStringList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArray', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$_FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAngle', {"":"value="
});

$.$defineNativeClass('SVGAnimatedLengthList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumberList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedTransformList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGCursorElement', {"":"x?,y?"
});

$.$defineNativeClass('SVGElementInstance', {
 get$on: function() {
  return $.ElementInstanceEvents$(this);
}
});

$.$defineNativeClass('SVGFEBlendElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFECompositeElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEDropShadowElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEFloodElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEImageElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEMergeElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEMorphologyElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEOffsetElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFEPointLightElement', {"":"x?,y?"
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFESpotLightElement', {"":"x?,y?"
});

$.$defineNativeClass('SVGFETileElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFETurbulenceElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGFilterElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGForeignObjectElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGGlyphRefElement', {"":"x?,y?"
});

$.$defineNativeClass('SVGImageElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGLength', {"":"value="
});

$.$defineNativeClass('SVGLengthList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGMatrix', {
 rotate$1: function(angle) {
  return this.rotate(angle);
},
 translate$2: function(x, y) {
  return this.translate(x,y);
}
});

$.$defineNativeClass('SVGNumber', {"":"value="
});

$.$defineNativeClass('SVGNumberList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcAbs', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegArcRel', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"":"x?"
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"":"x?"
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"":"y?"
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"":"y?"
});

$.$defineNativeClass('SVGPathSegList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"":"x?,y?"
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"":"x?,y?"
});

$.$defineNativeClass('SVGPatternElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGPoint', {"":"x?,y?"
});

$.$defineNativeClass('SVGPointList', {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGRect', {"":"height=,width=,x?,y?"
});

$.$defineNativeClass('SVGRectElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGStringList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGSVGElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGTextPositioningElement', {"":"x?,y?",
 rotate$1: function(arg0) { return this.rotate.call$1(arg0); }
});

$.$defineNativeClass('SVGTransformList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGUseElement', {"":"height?,width?,x?,y?"
});

$.$defineNativeClass('SVGElementInstanceList', {"":"length?",
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('AudioBuffer', {"":"length?"
});

$.$defineNativeClass('AudioContext', {
 get$on: function() {
  return $.AudioContextEvents$(this);
}
});

$.$defineNativeClass('AudioParam', {"":"value="
});

$.$defineNativeClass('ScriptProcessorNode', {
 get$on: function() {
  return $.ScriptProcessorNodeEvents$(this);
}
});

// 223 dynamic classes.
// 336 classes
// 30 !leaf
(function() {
  var v0_Uint8Array = 'Uint8Array|Uint8ClampedArray', v1_MediaElement = 'HTMLMediaElement|HTMLVideoElement|HTMLAudioElement', v2_TextPositioningElement = 'SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement', v3_Element = [v1_MediaElement, v2_TextPositioningElement, 'Element|HTMLElement|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement'].join('|'), v4_CharacterData = 'CharacterData|Text|CDATASection|Comment', v5_Document = 'Document|HTMLDocument|SVGDocument', v6_DocumentFragment = 'DocumentFragment|ShadowRoot', v7_Node = [v3_Element, v4_CharacterData, v5_Document, v6_DocumentFragment, 'Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction'].join('|'), v8_AbstractWorker = 'AbstractWorker|SharedWorker|Worker', v9_WorkerContext = 'WorkerContext|DedicatedWorkerContext|SharedWorkerContext', v10_IDBRequest = 'IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest', v11_MediaStream = 'MediaStream|LocalMediaStream';
  $.dynamicSetMetadata([['WorkerContext', v9_WorkerContext], ['CSSValueList', 'CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue'], ['AbstractWorker', v8_AbstractWorker], ['Uint8Array', v0_Uint8Array], ['ArrayBufferView', [v0_Uint8Array, 'ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array'].join('|')], ['Blob', 'Blob|File'], ['CanvasRenderingContext', 'CanvasRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext'], ['CharacterData', v4_CharacterData], ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList'], ['Document', v5_Document], ['DocumentFragment', v6_DocumentFragment], ['HTMLMediaElement', v1_MediaElement], ['SVGTextPositioningElement', v2_TextPositioningElement], ['Element', v3_Element], ['EntrySync', 'EntrySync|DirectoryEntrySync|FileEntrySync'], ['Node', v7_Node], ['IDBRequest', v10_IDBRequest], ['MediaStream', v11_MediaStream], ['EventTarget', [v7_Node, v8_AbstractWorker, v9_WorkerContext, v10_IDBRequest, v11_MediaStream, 'EventTarget|BatteryManager|DOMApplicationCache|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|IDBDatabase|IDBTransaction|DOMWindow|MediaController|MediaSource|MediaStreamTrack|MediaStreamTrackList|MessagePort|Notification|PeerConnection00|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|SVGElementInstance|AudioContext'].join('|')], ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection'], ['IDBCursor', 'IDBCursor|IDBCursorWithValue'], ['AudioParam', 'AudioParam|AudioGain'], ['MouseEvent', 'MouseEvent|WheelEvent'], ['NodeList', 'NodeList|RadioNodeList']]);
})();


//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.main(); });
      } else {
        $.main();
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.main(); });
  } else {
    $.main();
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var s = desc[''].split(';'), supr = s[0];
      var fields = s[1] == '' ? [] : s[1].split(',');
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=BadAliensDart.dart.js.map